/*

		 Find First and Last Position of Element in Sorted Array


Problem Link -https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/


Use binary search 1st to find target which will be mid but it might be a possible ans then it  maybe possible that there are more targets in the left or right hand side so apply binary search again on the left or right hand side.

Video Solution - 1:02:34 https://www.youtube.com/watch?v=W9QJ8HaRvJQ&t=3561s

*/


class Solution {
    public int[] searchRange(int[] nums, int target) {
        int start=0;
        int end=nums.length-1;
        int[] ans={-1,-1};

        // making a binary search function to find first occurance and last
        
        int first = searchBS(nums,target,true);  
        int last = searchBS(nums,target,false);  
        // passing boolean value to find first or last occurance
        
        ans[0]=first; ans[1]=last;
        
        return ans;
    }
    
    int searchBS(int[] nums, int target, boolean isFirst)
    {
        int start=0;
        int end = nums.length-1;
        int ans=-1;
        
        while(start<=end)
        {
            int mid= start + (end-start)/2;
            
            if(target< nums[mid])
            {
                end=mid-1;
            }
            else if(target>nums[mid])
            {
                start=mid+1;
            }
            else
            {
                ans=mid;  
                // possible ans ,now finding elements right or left to it 
                
                if(isFirst)
                {
                    end=mid-1;
                }else
                {
                    start=mid+1;
                }
            }
        }
        
        return ans;
        
    }
    
}