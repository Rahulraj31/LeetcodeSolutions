                                                                                                                                        === 20. Valid Parentheses ===

https://leetcode.com/problems/valid-parentheses/

https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/
use stack or ArrayDeque which is faster than using Stack class

1. Declare a character stack S.
2. Now traverse the expression string exp.
3. If the current character is a starting bracket (‘(‘ or ‘{‘ or ‘[‘) then push it to stack.
4. If the current character is a closing bracket (‘)’ or ‘}’ or ‘]’) then pop from stack and if the popped character is the matching     starting bracket then fine else brackets are not     balanced.
5. After complete traversal, if there is some starting bracket left in stack then “not balanced”



-------------------------------------------------------
class Solution {
    public boolean isValid(String s) {
        Deque<Character> stack
            = new ArrayDeque<Character>();
        
        for (int i = 0; i < s.length(); i++){
	        char x = s.charAt(i);
	        if(x == '(' || x == '[' || x == '{'){
                //push
	            stack.push(x);
	            continue;
	        }
            // If current character is not opening
            // bracket, then it must be closing. So stack
            // cannot be empty at this point.
	        if(stack.isEmpty()){
	            return false;
	        }
            
	        if(x==')' && (stack.pop() !='(')){
	            return false;
	        }
	        if(x==']' && (stack.pop() !='[')){
	            return false;
	        }
	        if(x=='}' && (stack.pop() !='{')){
	            return false;
	        }
	    }
        // Check Empty Stack if empty then balanced else not balanced 
	    return (stack.isEmpty());
    }
}